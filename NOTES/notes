Why You Doing Dis?

I want to make sure I can write safe code. I used to think that I could just whip up a buncha components and third-party libraries in a pot and serve it. Not. Good. Not a good way to think at all. I looked over my code before for my other web projects and they were all disorganized, not pretty, and i think one especially had a lot of vulnerabilities. You know which one. the fitness webapp one. ugh makes me cringe. anyways lets start this one, the RIGHT way.

oh but another note is the original chatApp didnt have good security rules. the firebase rules were set in a very uhm. it was stupid TwT it was literally just checking if the user is authenticated LMAO

Chat app

SECURITY DETAILS:

for privChats

-   isFriend

-   notBlocked

-   notBanned

for groupChats:

-   inGroup

-   notBlocked

-   notBanned

FOR BACKEND FIREBASE:

-   write only to themselves

-   no data regarding banning should be implemented within their own writable data... obviously.

SCHEMA:

-   privateMessages

-- DM1 (dmID, users - SHOULD ONLY BE 2 MAX - set a rule or smthign for this)

--- msgID, sender, content (file, text, file and text), timestamp
--- ...

-- ...

-   groupMessages

-- GC1 (gcID, users)

--- msgID, sender, content (file, text, file and text), timestamp
--- ...

-- ...

Additional Security Things:

Configure CORS (cross origin resource sharing probably also in firebase i dunno maybe u wanna use a different framework or smthing for hosting, we'll see)

RUN ZAP SPIDER ON THE SITE TO SEE IF THERE ARE ANY VULNS YOU MISSED

MAKE SURE THERE ARE NO IDORS

Firebase Authentication uses JWT tokens

{Object.keys(usrData).map((key, index) => (

<div key={index}>
{usrData[key] !== undefined && (
<p>
{key}
{usrData[key]}
</p>
)}
</div>
))}

mapping a object in tsx





FOR THE KEY EXCHANGE:


    ==> when user1 sends a friend request to user2, the key exchange on their part begins

    ====> user1's public key is sent to the firestore friendRequest doc

    ==> when user2 accepts a friend request from user1, the key exchang on their part begins

    ====> user2's public key is sent to the firestore friendRequest doc

    
    ----------------------------


    ----------------------------

    whenever the user's go to their dashboard, useEffect's listen for changes to the friendRequest docs that the user is a part of (uid is present within them) AND where the status field is set to true (indicating the users are friends)

    as it listens for docs with these conditions, the publicKey of each friend and the privateKey (in encrypted form within the localStorage (privKeyUnlocker is saved on firestore and only accessible if the user is logged in)) are used to calculate the symmetric key for communication. the user's have to recalculate the keys each time they go to one of their chats.

    symmetric keys are not saved within browser storage of any kind. the key remains a variable within a useState ensuring that when the user closes the tab, they will have to recalculate their keys. they are listed on their dashboard as their friends, and each friend has a link to the chatID in privateChats top-level collection

    authenticate_to_firebase => dashboard (lists document references to each friend) => user_clicks_on_friend => user_taken_to_chat_room => user_calculates_symmetric_key_via_accessing_friendRequestDoc_then_decrypts_msgs_from_firestore

    ----------------------------

    if user wishes to send a message, the calculated key is just used for encryption instead then the result is written to firestore




